/// <reference types="node" />
import { EventEmitter } from 'events';
import { ITask, ITaskChange, ITaskWorker, ITasksGroupFilter, ITaskHandler } from './interfaces';
export declare interface TasksManager {
    on(event: 'change', listener: (e: ITaskChange) => void): this;
}
/**
 * Allows to create multiple channels with given groups.
 */
export declare class TasksManager<K = number> extends EventEmitter {
    private workers;
    protected queue: ITask[];
    protected taskCounter: number;
    protected unavailableWorkers: number;
    workerFilter: ITasksGroupFilter;
    getWorkerInstance: (index: number, group: string) => K;
    protected getWorker(group: string): ITaskWorker;
    protected getWorkers(indexes?: number[]): ITaskWorker[];
    setWorkers(...workers: string[]): void;
    handle<T = void>(fn: ITaskHandler<K>, group?: string, taskId?: number): Promise<T>;
    protected process: (task: ITask, worker?: ITaskWorker) => Promise<void>;
    protected processNext(): Promise<void>;
    protected workersCheck(): void;
    pauseWorkers(...indexes: number[]): void;
    resumeWorkers(...indexes: number[]): void;
    deleteTasks(...ids: number[]): void;
    deleteAllTasks(): void;
    createTaskId(): number;
    protected finishTask(id: number, data?: any, error?: Error): void;
}
