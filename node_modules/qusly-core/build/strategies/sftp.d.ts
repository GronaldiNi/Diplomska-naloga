/// <reference types="node" />
import { Writable, Readable } from 'stream';
import { Socket } from 'net';
import { Client, SFTPWrapper } from 'ssh2';
import { Stats, FileEntry } from 'ssh2-streams';
import { FileInfo } from 'basic-ftp';
import { Strategy } from './strategy';
import { IFile, ITransferOptions, IFtpConfig, ISFtpOptions, ITransferInfo } from '../interfaces';
export declare interface SftpStrategy {
    config: IFtpConfig;
    options: ISFtpOptions;
}
export declare class SftpStrategy extends Strategy {
    protected client: Client;
    protected wrapper: SFTPWrapper;
    connected: boolean;
    protected get socket(): Socket;
    protected getWrapper(): SFTPWrapper;
    connect: () => Promise<void>;
    protected onKeyboardInteractive: (name: any, instructions: any, instructionsLang: any, prompts: any, finish: any) => void;
    protected onDisconnect: () => void;
    disconnect: () => Promise<void>;
    download: (dest: Writable, info: ITransferInfo, options?: ITransferOptions) => Promise<void>;
    upload: (source: Readable, info: ITransferInfo, options?: ITransferOptions) => Promise<void>;
    list: (path?: string) => Promise<IFile[]>;
    protected formatFile: (file: FileInfo, entry: FileEntry) => IFile;
    protected _list(path: string): Promise<FileEntry[]>;
    protected _stat(path: string): Promise<Stats>;
    size: (path: any) => Promise<number>;
    exists: (path: string) => Promise<boolean>;
    move: (source: any, dest: any) => Promise<void>;
    removeFile: (path: any) => Promise<void>;
    removeEmptyFolder: (path: any) => Promise<void>;
    removeFolder: (path: any) => Promise<void>;
    createFolder: (path: any) => Promise<void>;
    createEmptyFile: (path: any) => Promise<void>;
    protected _open(path: string, mode: string | number): Promise<Buffer>;
    protected _close(buffer: Buffer): Promise<void>;
    pwd: () => Promise<string>;
    send: (command: any) => Promise<string>;
    protected handle: <T = void>(fn: Function, ...args: any[]) => Promise<T>;
    protected handleTransfer: (source: Readable, dest: Writable, info: ITransferInfo, options: ITransferOptions) => Promise<void>;
}
