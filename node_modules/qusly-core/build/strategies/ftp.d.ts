/// <reference types="node" />
import { Client, FileInfo } from 'basic-ftp';
import { Writable, Readable } from 'stream';
import { Strategy } from './strategy';
import { IFile, IFtpConfig, ITransferOptions, IFtpOptions, ITransferInfo } from '../interfaces';
export declare interface FtpStrategy {
    config: IFtpConfig;
    options: IFtpOptions;
}
export declare class FtpStrategy extends Strategy {
    protected client: Client;
    get connected(): boolean;
    protected get isFTPS(): boolean;
    protected get socket(): import("net").Socket | import("tls").TLSSocket;
    connect: () => Promise<void>;
    disconnect: () => Promise<void>;
    download: (dest: Writable, info: ITransferInfo, options?: ITransferOptions) => Promise<void>;
    upload: (source: Readable, info: ITransferInfo, options?: ITransferOptions) => Promise<void>;
    list: (path: any) => Promise<IFile[]>;
    size: (path: any) => Promise<number>;
    exists: (path: string) => Promise<boolean>;
    move: (source: any, dest: any) => Promise<void>;
    removeFile: (path: any) => Promise<void>;
    removeEmptyFolder: (path: any) => Promise<void>;
    removeFolder: (path: any) => Promise<void>;
    createFolder: (path: any) => Promise<void>;
    createEmptyFile: (path: any) => Promise<void>;
    pwd: () => Promise<string>;
    send: (command: any) => Promise<string>;
    protected formatFile: (file: FileInfo) => IFile;
    protected handle: <T = void>(fn: Function) => Promise<T>;
    protected handleTransfer: (fn: Function, info: ITransferInfo, options: ITransferOptions) => Promise<void>;
}
