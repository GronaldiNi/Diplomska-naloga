/// <reference types="node" />
import { EventEmitter } from 'events';
import { Writable, Readable } from 'stream';
import { IFile, ITransferOptions, ITransferProgressListener, ITransferInfo } from '../interfaces';
export declare interface Strategy {
    on(event: 'connect', listener: () => void): this;
    on(event: 'disconnect', listener: () => void): this;
    on(event: 'progress', listener: ITransferProgressListener): this;
    once(event: 'connect', listener: () => void): this;
    once(event: 'disconnect', listener: () => void): this;
}
/**
 * An abstract class, which allows to create a custom protocol.
 */
export declare abstract class Strategy extends EventEmitter {
    protected readonly config: any;
    protected readonly options?: any;
    abstract readonly connected: boolean;
    private transfer;
    abstract connect: () => Promise<void>;
    abstract disconnect: () => Promise<void>;
    abort(): Promise<void>;
    abstract download: (dest: Writable, info: ITransferInfo, options?: ITransferOptions) => Promise<void>;
    abstract upload: (source: Readable, info: ITransferInfo, options?: ITransferOptions) => Promise<void>;
    abstract list: (path?: string) => Promise<IFile[]>;
    abstract size: (path: string) => Promise<number>;
    abstract exists: (path: string) => Promise<boolean>;
    abstract move: (source: string, dest: string) => Promise<void>;
    abstract removeFile: (path: string) => Promise<void>;
    abstract removeEmptyFolder: (path: string) => Promise<void>;
    abstract removeFolder: (path: string) => Promise<void>;
    abstract createFolder: (path: string) => Promise<void>;
    abstract createEmptyFile: (path: string) => Promise<void>;
    abstract pwd: () => Promise<string>;
    abstract send: (command: string) => Promise<string>;
    constructor(config: any, options?: any);
    protected prepareTransfer(info: ITransferInfo, options?: ITransferOptions): (bytes: number) => void;
    protected finishTransfer(): void;
    protected handleNetwork<T = void>(cb: any, clean?: any): Promise<T>;
}
